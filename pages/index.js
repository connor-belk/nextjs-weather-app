import Head from "next/head";
import Image from "next/legacy/image";
import axios from "axios";
import { useState, useEffect } from "react";
import { BsSearch } from "react-icons/bs";
import Weather from "../components/Weather";
import WeatherOneCall from "../components/WeatherOneCall";
import Loader from "../components/Loader";

export default function Home() {
  // const [city, setCity] = useState("");
  const [cityState, setCityState] = useState("");
  const [weather, setWeather] = useState({});
  const [loading, setLoading] = useState(false);
  const [lat, setLat] = useState("");
  const [long, setLong] = useState("");
  const [updatedOneCallURL, setUpdatedOneCallURL] = useState("");

  // var country_code = "US";

  // const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.NEXT_PUBLIC_WEATHER_KEY}&units=imperial`;

  const geoUrl = `http://api.openweathermap.org/geo/1.0/direct?q=${cityState},US&limit=5&appid=${process.env.NEXT_PUBLIC_WEATHER_KEY}`;

  let oneCallURL = `https://api.openweathermap.org/data/3.0/onecall?lat=${lat}&lon=${long}&appid=${process.env.NEXT_PUBLIC_WEATHER_KEY}`;

  const fetchWeather = async (e) => {
    // e.preventDefault();
    setLoading(true);
    await axios.get(oneCallURL).then((res) => {
      setWeather(res.data);
    });
    // setCity("");
    setLoading(false);
  };

  const fetchLocation = async (e) => {
    e.preventDefault();
    setLoading(true);
    console.log("Fetching location...");
    await axios
      .get(geoUrl)
      .then((res) => {
        setLat(res.data[0].lat);
        setLong(res.data[0].lon);
        console.log(
          `Location FOUND. Lat: ${res.data[0].lat} Long: ${res.data[0].lon}`
        );
      })
      .then(() => {
        console.log("Waiting 1.5 seconds...");
        setTimeout(() => {
          console.log("Fetching weather...");
          fetchWeather();
        }, 1500);
      });
  };

  useEffect(() => {
    window.addEventListener("keyup", (e) => {
      if (e.key === "Enter") {
        e.target.blur();
      }
    });
  }, []);

  return (
    <div className="relative h-screen">
      <Head>
        <title>Weather - Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/cloud.png" />
      </Head>

      <div className="absolute top-0 left-0 right-0 bottom-0 bg-black/40 z-[1]" />
      <Image
        src="https://images.unsplash.com/photo-1562155618-e1a8bc2eb04f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1791&q=80"
        className="object-cover"
        layout="fill"
        alt="#"
      />

      {/* SEARCH */}
      <div className="relative flex justify-between items-center max-w-[500px] w-full m-auto pt-4 text-white z-10">
        <form
          className="flex justify-between items-center w-full m-auto p-3 bg-transparent border border-gray-300 text-white rounded-2xl"
          onSubmit={fetchLocation}
        >
          <div>
            <input
              className="bg-transparent backdrop-blur-sm text-white border-none focus:outline-none text-2xl placeholder:text-gray"
              type="text"
              placeholder="Search City"
              onChange={(e) => setCityState(e.target.value)}
            />
            <p className="mt-2 text-sm text-gray-500">
              U.S. Locations <span>ONLY</span>. Ex: Wilmington, NC
            </p>
          </div>
          <button>
            <BsSearch className="text-white/80" size={20} />
          </button>
        </form>
      </div>

      {/* DEBUG */}
      <div className="absolute top-0 left-0 text-white">
        <p>cityState={cityState}</p>
        <p>lat={lat}</p>
        <p>long={long}</p>
        <p>updatedOneCallURL={updatedOneCallURL}</p>
      </div>

      {/* WEATHER DISPLAY */}

      {loading ? (
        <Loader className="text-center" />
      ) : (
        weather.main && <WeatherOneCall data={weather} />
      )}

      {/* {weather.main ? <Weather data={weather} /> : <Loader />} */}
    </div>
  );
}
